// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoalsMainPage tests expect to render GoalsMainPage component to render 1`] = `
<div
  className="contenedorR"
>
  <Header
    currentGoal={
      Object {
        "objectives": Array [],
      }
    }
    history={
      Object {
        "location": Object {
          "state": Object {
            "goal": Object {
              "dateStart": "2021-07",
              "goalId": 1,
              "name": "myGoal",
              "objectives": Array [
                Object {
                  "foodCategoryId": 1,
                  "objectiveCalories": 3000,
                },
                Object {
                  "foodCategoryId": 2,
                  "objectiveCalories": 2000,
                },
              ],
              "totalCalories": 5000,
            },
          },
        },
        "push": [MockFunction],
      }
    }
    onAddGoal={[MockFunction]}
    onAddObjectiveToCurrentGoal={[MockFunction]}
    onChangeCurrentGoalNameTotalCaloriesAndDateStart={[MockFunction]}
    onGetAllFoods={[MockFunction]}
    onGetFoodCategories={[MockFunction]}
    onLogout={[MockFunction]}
    onRemoveObjectiveFromCurrentGoal={[MockFunction]}
    onResetCurrentGoal={[MockFunction]}
    onUpdateCurrentGoal={[MockFunction]}
    preventDefault={[MockFunction]}
  />
  <div
    className="contenidoR"
    style={
      Object {
        "backgroundColor": "#B6E052",
      }
    }
  >
    <div
      className="col2R"
    >
      <FoodCategoriesSearchBar
        currentGoal={
          Object {
            "objectives": Array [],
          }
        }
        history={
          Object {
            "location": Object {
              "state": Object {
                "goal": Object {
                  "dateStart": "2021-07",
                  "goalId": 1,
                  "name": "myGoal",
                  "objectives": Array [
                    Object {
                      "foodCategoryId": 1,
                      "objectiveCalories": 3000,
                    },
                    Object {
                      "foodCategoryId": 2,
                      "objectiveCalories": 2000,
                    },
                  ],
                  "totalCalories": 5000,
                },
              },
            },
            "push": [MockFunction],
          }
        }
        onAddGoal={[MockFunction]}
        onAddObjectiveToCurrentGoal={[MockFunction]}
        onChangeCurrentGoalNameTotalCaloriesAndDateStart={[MockFunction]}
        onGetAllFoods={[MockFunction]}
        onGetFoodCategories={[MockFunction]}
        onLogout={[MockFunction]}
        onRemoveObjectiveFromCurrentGoal={[MockFunction]}
        onResetCurrentGoal={[MockFunction]}
        onUpdateCurrentGoal={[MockFunction]}
        preventDefault={[MockFunction]}
      />
    </div>
  </div>
  <div
    className="sidebarR"
  >
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
        }
      }
    >
      <img
        alt="goal"
        src="goal.png"
        style={
          Object {
            "width": 100,
          }
        }
      />
      <div
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <WithStyles(ForwardRef(TextField))
          label="Nombre de la meta"
          name="name"
          onChange={[Function]}
          required={true}
          type="name"
          value="myGoal"
        />
        <WithStyles(ForwardRef(TextField))
          label="CalorÃ­as de la meta"
          name="totalCalories"
          onChange={[Function]}
          required={true}
          type="totalCalories"
          value={5000}
        />
      </div>
      <div
        className="row"
      >
        <div
          className="w-100"
        />
        <div
          className="col"
          style={
            Object {
              "textAlign": "center",
            }
          }
        >
          <ul
            style={
              Object {
                "marginBlock": "0em",
                "paddingInlineStart": "1%",
              }
            }
          />
        </div>
        <div
          className="w-100"
        />
        <div
          className="col"
          style={
            Object {
              "marginTop": "15px",
              "textAlign": "center",
            }
          }
        >
          <r
            allowSameDay={false}
            customTimeInput={null}
            dateFormat="MM-yyyy"
            dateFormatCalendar="LLLL yyyy"
            disabled={false}
            disabledKeyboardNavigation={false}
            dropdownMode="scroll"
            enableTabLoop={true}
            excludeScrollbar={true}
            focusSelectedMonth={false}
            monthsShown={1}
            name="fecha consumo"
            nextMonthButtonLabel="Next Month"
            nextYearButtonLabel="Next Year"
            onBlur={[Function]}
            onCalendarClose={[Function]}
            onCalendarOpen={[Function]}
            onChange={[Function]}
            onClickOutside={[Function]}
            onFocus={[Function]}
            onInputClick={[Function]}
            onInputError={[Function]}
            onKeyDown={[Function]}
            onMonthChange={[Function]}
            onSelect={[Function]}
            onYearChange={[Function]}
            placeholderText="Fecha de consumo"
            preventOpenOnFocus={false}
            previousMonthButtonLabel="Previous Month"
            previousYearButtonLabel="Previous Year"
            readOnly={false}
            renderDayContents={[Function]}
            selected={1625108400000}
            shouldCloseOnSelect={true}
            showFourColumnMonthYearPicker={false}
            showFullMonthYearPicker={false}
            showMonthYearPicker={true}
            showPopperArrow={true}
            showPreviousMonths={false}
            showQuarterYearPicker={false}
            showTimeInput={false}
            showTimeSelect={false}
            showTwoColumnMonthYearPicker={false}
            showYearPicker={false}
            strictParsing={false}
            timeCaption="Time"
            timeInputLabel="Time"
            timeIntervals={30}
            withPortal={false}
            yearItemNumber={12}
          />
        </div>
      </div>
      <button
        className="btn btn--primary btn--s"
        onClick={[Function]}
        style={
          Object {
            "backgroundColor": "#E55812",
            "boxShadow": "0px 4px 4px grey",
            "color": "white",
            "fontSize": "14px",
            "margin": "10px",
          }
        }
      >
        Editar Meta
      </button>
      <p />
      <button
        onClick={[Function]}
        style={
          Object {
            "marginTop": "10%",
          }
        }
        type="button"
      >
        Volver al Perfil
      </button>
    </div>
  </div>
  <Footer />
</div>
`;

exports[`GoalsMainPage tests expect to render GoalsMainPage component to render 2`] = `
<div
  className="contenedorR"
>
  <Header
    currentGoal={
      Object {
        "dateStart": "2021-07",
        "name": "Plan enero",
        "objectives": Array [],
        "totalCalories": 7000,
      }
    }
    history={
      Object {
        "location": Object {
          "state": Object {
            "goal": Object {},
          },
        },
        "push": [MockFunction],
      }
    }
    onAddGoal={[MockFunction]}
    onAddObjectiveToCurrentGoal={[MockFunction]}
    onChangeCurrentGoalNameTotalCaloriesAndDateStart={[MockFunction]}
    onGetAllFoods={[MockFunction]}
    onGetFoodCategories={[MockFunction]}
    onLogout={[MockFunction]}
    onRemoveObjectiveFromCurrentGoal={[MockFunction]}
    onResetCurrentGoal={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onUpdateCurrentGoal={[MockFunction]}
    preventDefault={[MockFunction]}
  />
  <div
    className="contenidoR"
    style={
      Object {
        "backgroundColor": "#B6E052",
      }
    }
  >
    <div
      className="col2R"
    >
      <FoodCategoriesSearchBar
        currentGoal={
          Object {
            "dateStart": "2021-07",
            "name": "Plan enero",
            "objectives": Array [],
            "totalCalories": 7000,
          }
        }
        history={
          Object {
            "location": Object {
              "state": Object {
                "goal": Object {},
              },
            },
            "push": [MockFunction],
          }
        }
        onAddGoal={[MockFunction]}
        onAddObjectiveToCurrentGoal={[MockFunction]}
        onChangeCurrentGoalNameTotalCaloriesAndDateStart={[MockFunction]}
        onGetAllFoods={[MockFunction]}
        onGetFoodCategories={[MockFunction]}
        onLogout={[MockFunction]}
        onRemoveObjectiveFromCurrentGoal={[MockFunction]}
        onResetCurrentGoal={
          [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onUpdateCurrentGoal={[MockFunction]}
        preventDefault={[MockFunction]}
      />
    </div>
  </div>
  <div
    className="sidebarR"
  >
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
        }
      }
    >
      <img
        alt="goal"
        src="goal.png"
        style={
          Object {
            "width": 100,
          }
        }
      />
      <div
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <WithStyles(ForwardRef(TextField))
          label="Nombre de la meta"
          name="name"
          onChange={[Function]}
          required={true}
          type="name"
        />
        <WithStyles(ForwardRef(TextField))
          label="CalorÃ­as de la meta"
          name="totalCalories"
          onChange={[Function]}
          required={true}
          type="totalCalories"
        />
      </div>
      <div
        className="row"
      >
        <div
          className="w-100"
        />
        <div
          className="col"
          style={
            Object {
              "textAlign": "center",
            }
          }
        >
          <ul
            style={
              Object {
                "marginBlock": "0em",
                "paddingInlineStart": "1%",
              }
            }
          />
        </div>
        <div
          className="w-100"
        />
        <div
          className="col"
          style={
            Object {
              "marginTop": "15px",
              "textAlign": "center",
            }
          }
        >
          <r
            allowSameDay={false}
            customTimeInput={null}
            dateFormat="MM-yyyy"
            dateFormatCalendar="LLLL yyyy"
            disabled={false}
            disabledKeyboardNavigation={false}
            dropdownMode="scroll"
            enableTabLoop={true}
            excludeScrollbar={true}
            focusSelectedMonth={false}
            monthsShown={1}
            name="fecha consumo"
            nextMonthButtonLabel="Next Month"
            nextYearButtonLabel="Next Year"
            onBlur={[Function]}
            onCalendarClose={[Function]}
            onCalendarOpen={[Function]}
            onChange={[Function]}
            onClickOutside={[Function]}
            onFocus={[Function]}
            onInputClick={[Function]}
            onInputError={[Function]}
            onKeyDown={[Function]}
            onMonthChange={[Function]}
            onSelect={[Function]}
            onYearChange={[Function]}
            placeholderText="Fecha de consumo"
            preventOpenOnFocus={false}
            previousMonthButtonLabel="Previous Month"
            previousYearButtonLabel="Previous Year"
            readOnly={false}
            renderDayContents={[Function]}
            selected={NaN}
            shouldCloseOnSelect={true}
            showFourColumnMonthYearPicker={false}
            showFullMonthYearPicker={false}
            showMonthYearPicker={true}
            showPopperArrow={true}
            showPreviousMonths={false}
            showQuarterYearPicker={false}
            showTimeInput={false}
            showTimeSelect={false}
            showTwoColumnMonthYearPicker={false}
            showYearPicker={false}
            strictParsing={false}
            timeCaption="Time"
            timeInputLabel="Time"
            timeIntervals={30}
            withPortal={false}
            yearItemNumber={12}
          />
        </div>
      </div>
      <button
        className="btn btn--primary btn--s"
        onClick={[Function]}
        style={
          Object {
            "backgroundColor": "#E55812",
            "boxShadow": "0px 4px 4px grey",
            "color": "white",
            "fontSize": "14px",
            "margin": "10px",
          }
        }
      >
        Editar Meta
      </button>
      <p />
      <button
        onClick={[Function]}
        style={
          Object {
            "marginTop": "10%",
          }
        }
        type="button"
      >
        Volver al Perfil
      </button>
    </div>
  </div>
  <Footer />
</div>
`;

exports[`GoalsMainPage tests expect to render GoalsMainPage component to render when you dont have goals state false for you 1`] = `
"<div className=\\"contenedorR\\">
  <Header currentGoal={{...}} onLogout={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onAddObjectiveToCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onAddGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onGetAllFoods={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onResetCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [] ], instances: [ { currentGoal: { name: 'Plan enero', dateStart: '2021-07', totalCalories: 7000, objectives: [Array] }, onLogout: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onAddObjectiveToCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onAddGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onGetAllFoods: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onResetCurrentGoal: [Circular], onChangeCurrentGoalNameTotalCaloriesAndDateStart: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onGetFoodCategories: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onRemoveObjectiveFromCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onUpdateCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, preventDefault: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, history: { push: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, location: [Array] } } ], invocationCallOrder: [ 3 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined } ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onChangeCurrentGoalNameTotalCaloriesAndDateStart={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onGetFoodCategories={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRemoveObjectiveFromCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onUpdateCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} preventDefault={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} history={{...}} />
  <div className=\\"contenidoR\\" style={{...}}>
    <div className=\\"col2R\\">
      <FoodCategoriesSearchBar currentGoal={{...}} onLogout={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onAddObjectiveToCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onAddGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onGetAllFoods={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onResetCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [] ], instances: [ { currentGoal: { name: 'Plan enero', dateStart: '2021-07', totalCalories: 7000, objectives: [Array] }, onLogout: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onAddObjectiveToCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onAddGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onGetAllFoods: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onResetCurrentGoal: [Circular], onChangeCurrentGoalNameTotalCaloriesAndDateStart: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onGetFoodCategories: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onRemoveObjectiveFromCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, onUpdateCurrentGoal: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, preventDefault: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, history: { push: [Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: [Object], mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }, location: [Array] } } ], invocationCallOrder: [ 3 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined } ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onChangeCurrentGoalNameTotalCaloriesAndDateStart={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onGetFoodCategories={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRemoveObjectiveFromCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onUpdateCurrentGoal={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} preventDefault={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} history={{...}} />
    </div>
  </div>
  <div className=\\"sidebarR\\">
    <div style={{...}}>
      <img src=\\"goal.png\\" alt=\\"goal\\" style={{...}} />
      <div style={{...}}>
        <WithStyles(ForwardRef(TextField)) label=\\"Nombre de la meta\\" name=\\"name\\" type=\\"name\\" value=\\"\\" onChange={[Function (anonymous)]} required={true} />
        <WithStyles(ForwardRef(TextField)) label=\\"CalorÃ­as de la meta\\" name=\\"totalCalories\\" type=\\"totalCalories\\" value=\\"\\" onChange={[Function (anonymous)]} required={true} />
      </div>
      <div className=\\"row\\">
        <div className=\\"w-100\\" />
        <div className=\\"col\\" style={{...}}>
          <ul style={{...}} />
        </div>
        <div className=\\"w-100\\" />
        <div className=\\"col\\" style={{...}}>
          <r name=\\"fecha consumo\\" selected={{...}} onChange={[Function: onChange]} dateFormat=\\"MM-yyyy\\" placeholderText=\\"Fecha de consumo\\" showMonthYearPicker={true} allowSameDay={false} dateFormatCalendar=\\"LLLL yyyy\\" disabled={false} disabledKeyboardNavigation={false} dropdownMode=\\"scroll\\" onFocus={[Function: onFocus]} onBlur={[Function: onBlur]} onKeyDown={[Function: onKeyDown]} onInputClick={[Function: onInputClick]} onSelect={[Function: onSelect]} onClickOutside={[Function: onClickOutside]} onMonthChange={[Function: onMonthChange]} onCalendarOpen={[Function: onCalendarOpen]} onCalendarClose={[Function: onCalendarClose]} preventOpenOnFocus={false} onYearChange={[Function: onYearChange]} onInputError={[Function: onInputError]} monthsShown={1} readOnly={false} withPortal={false} shouldCloseOnSelect={true} showTimeSelect={false} showTimeInput={false} showPreviousMonths={false} showFullMonthYearPicker={false} showTwoColumnMonthYearPicker={false} showFourColumnMonthYearPicker={false} showYearPicker={false} showQuarterYearPicker={false} strictParsing={false} timeIntervals={30} timeCaption=\\"Time\\" previousMonthButtonLabel=\\"Previous Month\\" nextMonthButtonLabel=\\"Next Month\\" previousYearButtonLabel=\\"Previous Year\\" nextYearButtonLabel=\\"Next Year\\" timeInputLabel=\\"Time\\" enableTabLoop={true} yearItemNumber={12} renderDayContents={[Function: renderDayContents]} focusSelectedMonth={false} showPopperArrow={true} excludeScrollbar={true} customTimeInput={{...}} calendarStartDay={[undefined]} />
        </div>
      </div>
      <button onClick={[Function (anonymous)]} className=\\"btn btn--primary btn--s\\" style={{...}}>
        Crear Meta
      </button>
      <p />
      <button type=\\"button\\" onClick={[Function: onClick]} style={{...}}>
        Volver al Perfil
      </button>
    </div>
  </div>
  <Footer />
</div>"
`;
