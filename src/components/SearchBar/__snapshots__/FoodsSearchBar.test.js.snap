// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FoodsSearchBar tests expect to render FoodsSearchBar component to location state  1`] = `
<div
  className="table-responsive"
  style={
    Object {
      "backgroundColor": "#B6E052",
    }
  }
>
  <div
    className="barraBusquedaNombre"
    style={
      Object {
        "backgroundColor": "#B6E052",
      }
    }
  >
    <div
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "lightblue",
          "borderRadius": 10,
          "display": "flex",
          "justifyContent": "space-between",
          "marginBottom": 20,
        }
      }
    >
      <h1
        style={
          Object {
            "alignSelf": "center",
            "color": "rgb(0, 38, 38)",
            "fontFamily": "Arial",
            "fontSize": 30,
            "marginLeft": 5,
            "marginTop": 8,
            "textAlign": "center",
          }
        }
      >
        Alimentos
      </h1>
      <div>
        <input
          className="textField"
          name="busquedaNombre"
          onChange={[Function]}
          placeholder="Buscar por nombre"
          style={
            Object {
              "borderRadius": "13px",
            }
          }
          type="text"
          value=""
        />
        <button
          className="btnBuscar"
          style={
            Object {
              "borderRadius": "19px",
            }
          }
          type="button"
        >
           
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon={
              Object {
                "icon": Array [
                  512,
                  512,
                  Array [],
                  "f002",
                  "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z",
                ],
                "iconName": "search",
                "prefix": "fas",
              }
            }
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            swapOpacity={false}
            symbol={false}
            title=""
            transform={null}
          />
        </button>
      </div>
    </div>
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "justifyContent": "space-between",
        }
      }
    >
      <Combobox
        data={
          Array [
            Object {
              "foodCategoryId": 0,
              "name": "Ver todos los alimentos",
              "userId": null,
            },
            Object {
              "createdAt": "2021-09-30T14:09:34.756Z",
              "foodCategoryId": 1,
              "name": "Fruta",
              "updatedAt": "2021-09-30T14:09:34.756Z",
              "userId": null,
            },
            Object {
              "createdAt": "2021-09-30T18:58:58.542Z",
              "foodCategoryId": 7,
              "name": "Fideos",
              "updatedAt": "2021-09-30T18:58:58.542Z",
              "userId": null,
            },
          ]
        }
        defaultValue={
          Object {
            "foodCategoryId": 0,
            "name": "Ver todos los alimentos",
            "userId": null,
          }
        }
        groupBy={[Function]}
        onSelect={[Function]}
        placeholder="Buscar por categoría"
        renderListGroup={[Function]}
        style={
          Object {
            "width": "80%",
          }
        }
        textField="name"
      />
      <div
        style={
          Object {
            "justifyContent": "space-between",
            "paddingLeft": 10,
            "width": "20%",
          }
        }
      >
        <AddCategoryModal
          onCreateCategory={[MockFunction]}
          userId={1}
        />
        <DeleteCategoryModal
          categories={
            Array [
              Object {
                "createdAt": "2021-09-30T14:09:34.756Z",
                "foodCategoryId": 1,
                "name": "Fruta",
                "updatedAt": "2021-09-30T14:09:34.756Z",
                "userId": null,
              },
              Object {
                "createdAt": "2021-09-30T18:58:58.542Z",
                "foodCategoryId": 7,
                "name": "Fideos",
                "updatedAt": "2021-09-30T18:58:58.542Z",
                "userId": null,
              },
            ]
          }
          onDeleteCategory={[MockFunction]}
          userId={1}
        />
        <EditCategoryModal
          categories={
            Array [
              Object {
                "createdAt": "2021-09-30T14:09:34.756Z",
                "foodCategoryId": 1,
                "name": "Fruta",
                "updatedAt": "2021-09-30T14:09:34.756Z",
                "userId": null,
              },
              Object {
                "createdAt": "2021-09-30T18:58:58.542Z",
                "foodCategoryId": 7,
                "name": "Fideos",
                "updatedAt": "2021-09-30T18:58:58.542Z",
                "userId": null,
              },
            ]
          }
          onEditCategory={[MockFunction]}
          userId={1}
        />
      </div>
    </div>
  </div>
  <Memo()
    columns={
      Array [
        Object {
          "allowOverflow": true,
          "button": true,
          "cell": [Function],
          "ignoreRowClick": true,
        },
        Object {
          "name": "Nombre",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Categoría",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Porción Recomendada",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Calorías Por Porción Recomendada",
          "selector": [Function],
          "sortable": true,
        },
      ]
    }
    conditionalRowStyles={
      Array [
        Object {
          "style": Object {
            "&:hover": Object {
              "cursor": "pointer",
            },
            "backgroundColor": "#B6E052",
            "color": "black",
          },
          "when": [Function],
        },
      ]
    }
    customStyles={
      Object {
        "headCells": Object {
          "style": Object {
            "&:not(:last-of-type)": Object {},
          },
        },
        "headRow": Object {
          "style": Object {
            "backgroundColor": "#B6E052",
          },
        },
        "header": Object {
          "style": Object {
            "background": "#CCDDE2",
            "borderRadius": "17px",
            "minHeight": "56px",
            "textShadow": "1px 1px black",
          },
        },
        "pagination": Object {
          "style": Object {
            "backgroundColor": "#B6E052",
          },
        },
        "row": Object {
          "pointer": Object {
            "backgroundColor": "blue",
          },
        },
      }
    }
    data={
      Array [
        Object {
          "caloriesPerServing": 198,
          "createdAt": "2021-09-15T19:58:04.486Z",
          "foodId": 1,
          "name": "Milanesa",
          "recommendedServing": 85,
        },
        Object {
          "caloriesPerServing": 100,
          "createdAt": "2021-09-15T20:02:16.490Z",
          "foodId": 2,
          "name": "Papa",
          "recommendedServing": 200,
        },
      ]
    }
    fixedHeader={true}
    fixedHeaderScrollHeight="600px"
    noDataComponent={
      <span
        style={
          Object {
            "marginBottom": 150,
            "marginTop": 150,
          }
        }
      >
        No se encontró ningún alimento
      </span>
    }
    pagination={true}
    paginationComponentOptions={
      Object {
        "rangeSeparatorText": "de",
        "rowsPerPageText": "Filas por Página",
        "selectAllRowsItem": true,
        "selectAllRowsItemText": "Todos",
      }
    }
    pointer={true}
  />
</div>
`;

exports[`FoodsSearchBar tests expect to render FoodsSearchBar component to location state2  1`] = `
<div
  className="table-responsive"
  style={
    Object {
      "backgroundColor": "#B6E052",
    }
  }
>
  <div
    className="barraBusquedaNombre"
    style={
      Object {
        "backgroundColor": "#B6E052",
      }
    }
  >
    <div
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "lightblue",
          "borderRadius": 10,
          "display": "flex",
          "justifyContent": "space-between",
          "marginBottom": 20,
        }
      }
    >
      <h1
        style={
          Object {
            "alignSelf": "center",
            "color": "rgb(0, 38, 38)",
            "fontFamily": "Arial",
            "fontSize": 30,
            "marginLeft": 5,
            "marginTop": 8,
            "textAlign": "center",
          }
        }
      >
        Alimentos
      </h1>
      <div>
        <input
          className="textField"
          name="busquedaNombre"
          onChange={[Function]}
          placeholder="Buscar por nombre"
          style={
            Object {
              "borderRadius": "13px",
            }
          }
          type="text"
          value=""
        />
        <button
          className="btnBuscar"
          style={
            Object {
              "borderRadius": "19px",
            }
          }
          type="button"
        >
           
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon={
              Object {
                "icon": Array [
                  512,
                  512,
                  Array [],
                  "f002",
                  "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z",
                ],
                "iconName": "search",
                "prefix": "fas",
              }
            }
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            swapOpacity={false}
            symbol={false}
            title=""
            transform={null}
          />
        </button>
      </div>
    </div>
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "justifyContent": "space-between",
        }
      }
    >
      <Combobox
        data={
          Array [
            Object {
              "foodCategoryId": 0,
              "name": "Ver todos los alimentos",
              "userId": null,
            },
            Object {
              "createdAt": "2021-09-30T14:09:34.756Z",
              "foodCategoryId": 1,
              "name": "Fruta",
              "updatedAt": "2021-09-30T14:09:34.756Z",
              "userId": null,
            },
            Object {
              "createdAt": "2021-09-30T18:58:58.542Z",
              "foodCategoryId": 7,
              "name": "Fideos",
              "updatedAt": "2021-09-30T18:58:58.542Z",
              "userId": null,
            },
          ]
        }
        defaultValue={
          Object {
            "foodCategoryId": 0,
            "name": "Ver todos los alimentos",
            "userId": null,
          }
        }
        groupBy={[Function]}
        onSelect={[Function]}
        placeholder="Buscar por categoría"
        renderListGroup={[Function]}
        style={
          Object {
            "width": "80%",
          }
        }
        textField="name"
      />
      <div
        style={
          Object {
            "justifyContent": "space-between",
            "paddingLeft": 10,
            "width": "20%",
          }
        }
      >
        <AddCategoryModal
          onCreateCategory={[MockFunction]}
          userId={1}
        />
        <DeleteCategoryModal
          categories={
            Array [
              Object {
                "createdAt": "2021-09-30T14:09:34.756Z",
                "foodCategoryId": 1,
                "name": "Fruta",
                "updatedAt": "2021-09-30T14:09:34.756Z",
                "userId": null,
              },
              Object {
                "createdAt": "2021-09-30T18:58:58.542Z",
                "foodCategoryId": 7,
                "name": "Fideos",
                "updatedAt": "2021-09-30T18:58:58.542Z",
                "userId": null,
              },
            ]
          }
          onDeleteCategory={[MockFunction]}
          userId={1}
        />
        <EditCategoryModal
          categories={
            Array [
              Object {
                "createdAt": "2021-09-30T14:09:34.756Z",
                "foodCategoryId": 1,
                "name": "Fruta",
                "updatedAt": "2021-09-30T14:09:34.756Z",
                "userId": null,
              },
              Object {
                "createdAt": "2021-09-30T18:58:58.542Z",
                "foodCategoryId": 7,
                "name": "Fideos",
                "updatedAt": "2021-09-30T18:58:58.542Z",
                "userId": null,
              },
            ]
          }
          onEditCategory={[MockFunction]}
          userId={1}
        />
      </div>
    </div>
  </div>
  <Memo()
    columns={
      Array [
        Object {
          "allowOverflow": true,
          "button": true,
          "cell": [Function],
          "ignoreRowClick": true,
        },
        Object {
          "name": "Nombre",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Categoría",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Porción Recomendada",
          "selector": [Function],
          "sortable": true,
        },
        Object {
          "name": "Calorías Por Porción Recomendada",
          "selector": [Function],
          "sortable": true,
        },
      ]
    }
    conditionalRowStyles={
      Array [
        Object {
          "style": Object {
            "&:hover": Object {
              "cursor": "pointer",
            },
            "backgroundColor": "#B6E052",
            "color": "black",
          },
          "when": [Function],
        },
      ]
    }
    customStyles={
      Object {
        "headCells": Object {
          "style": Object {
            "&:not(:last-of-type)": Object {},
          },
        },
        "headRow": Object {
          "style": Object {
            "backgroundColor": "#B6E052",
          },
        },
        "header": Object {
          "style": Object {
            "background": "#CCDDE2",
            "borderRadius": "17px",
            "minHeight": "56px",
            "textShadow": "1px 1px black",
          },
        },
        "pagination": Object {
          "style": Object {
            "backgroundColor": "#B6E052",
          },
        },
        "row": Object {
          "pointer": Object {
            "backgroundColor": "blue",
          },
        },
      }
    }
    data={
      Array [
        Object {
          "caloriesPerServing": 198,
          "createdAt": "2021-09-15T19:58:04.486Z",
          "foodId": 1,
          "name": "Milanesa",
          "recommendedServing": 85,
        },
        Object {
          "caloriesPerServing": 100,
          "createdAt": "2021-09-15T20:02:16.490Z",
          "foodId": 2,
          "name": "Papa",
          "recommendedServing": 200,
        },
      ]
    }
    fixedHeader={true}
    fixedHeaderScrollHeight="600px"
    noDataComponent={
      <span
        style={
          Object {
            "marginBottom": 150,
            "marginTop": 150,
          }
        }
      >
        No se encontró ningún alimento
      </span>
    }
    pagination={true}
    paginationComponentOptions={
      Object {
        "rangeSeparatorText": "de",
        "rowsPerPageText": "Filas por Página",
        "selectAllRowsItem": true,
        "selectAllRowsItemText": "Todos",
      }
    }
    pointer={true}
  />
</div>
`;
