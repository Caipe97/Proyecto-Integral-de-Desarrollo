// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProfileMainPage tests expect to render ProfileMainPage component to render with signing in con comida 1`] = `
<div
  className="contenedorPro"
>
  <Header
    birthday="2010-01-21"
    email="julianlivrone@gmail.com"
    foodCategories={Array []}
    gender="masculino"
    height={170}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    meals={
      Array [
        Object {
          "dateEaten": "2021-09-09T00:00:00.000Z",
          "foodsAndQuantity": Object {
            "foods": Object {
              "caloriesPerServing": 198,
              "createdAt": "2021-09-15T19:58:04.486Z",
              "foodId": 1,
              "name": "Milanesa",
              "recommendedServing": 85,
            },
            "quantity": 1,
          },
          "mealId": 21,
          "name": "queso",
          "userId": 1,
        },
        Object {
          "dateEaten": "2021-09-09T00:00:00.000Z",
          "foodsAndQuantity": Object {
            "foods": Object {
              "caloriesPerServing": 198,
              "createdAt": "2021-09-15T19:58:04.486Z",
              "foodId": 1,
              "name": "Milanesa",
              "recommendedServing": 85,
            },
            "quantity": 1,
          },
          "mealId": 22,
          "name": "carne",
          "userId": 1,
        },
        Object {
          "dateEaten": "2021-09-09T00:00:00.000Z",
          "foodsAndQuantity": Object {
            "foods": Object {
              "caloriesPerServing": 198,
              "createdAt": "2021-09-15T19:58:04.486Z",
              "foodId": 1,
              "name": "Milanesa",
              "recommendedServing": 85,
            },
            "quantity": 1,
          },
          "mealId": 23,
          "name": "jamon",
          "userId": 1,
        },
      ]
    }
    name="julian"
    onGetFoodCategories={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetLastYearsMeals={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetMealsByPeriod={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            "Nov 07 2020",
            "Oct 07 2021",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetMealsFromUser={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onLogout={[MockFunction]}
    password="asd"
    preventDefault={[MockFunction]}
    surname="livrone"
    userId={1}
    weight={90}
  />
  <div
    className="contenidoPro"
  >
    <div
      className="comida"
    >
      <MealsSearchBar
        birthday="2010-01-21"
        email="julianlivrone@gmail.com"
        foodCategories={Array []}
        gender="masculino"
        height={170}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        meals={
          Array [
            Object {
              "dateEaten": "2021-09-09T00:00:00.000Z",
              "foodsAndQuantity": Object {
                "foods": Object {
                  "caloriesPerServing": 198,
                  "createdAt": "2021-09-15T19:58:04.486Z",
                  "foodId": 1,
                  "name": "Milanesa",
                  "recommendedServing": 85,
                },
                "quantity": 1,
              },
              "mealId": 21,
              "name": "queso",
              "userId": 1,
            },
            Object {
              "dateEaten": "2021-09-09T00:00:00.000Z",
              "foodsAndQuantity": Object {
                "foods": Object {
                  "caloriesPerServing": 198,
                  "createdAt": "2021-09-15T19:58:04.486Z",
                  "foodId": 1,
                  "name": "Milanesa",
                  "recommendedServing": 85,
                },
                "quantity": 1,
              },
              "mealId": 22,
              "name": "carne",
              "userId": 1,
            },
            Object {
              "dateEaten": "2021-09-09T00:00:00.000Z",
              "foodsAndQuantity": Object {
                "foods": Object {
                  "caloriesPerServing": 198,
                  "createdAt": "2021-09-15T19:58:04.486Z",
                  "foodId": 1,
                  "name": "Milanesa",
                  "recommendedServing": 85,
                },
                "quantity": 1,
              },
              "mealId": 23,
              "name": "jamon",
              "userId": 1,
            },
          ]
        }
        name="julian"
        onGetFoodCategories={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetLastYearsMeals={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetMealsByPeriod={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
                "Nov 07 2020",
                "Oct 07 2021",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetMealsFromUser={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onLogout={[MockFunction]}
        password="asd"
        preventDefault={[MockFunction]}
        surname="livrone"
        userId={1}
        weight={90}
      />
    </div>
  </div>
  <div
    className="dashboardPro"
  >
    <div
      className="col1"
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
          "textAlign": "center",
        }
      }
    >
      <p>
        Porcentaje calórico por Categoría
      </p>
      <div
        style={
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "alignSelf": "center",
            "height": "100%",
            "justifyContent": "center",
            "width": "100%",
          }
        }
      >
        <ForwardRef
          data={
            Object {
              "datasets": Array [
                Object {
                  "backgroundColor": Array [
                    "rgb(255, 99, 132)",
                    "rgb(54, 162, 235)",
                    "rgb(255, 206, 86)",
                    "rgb(75, 192, 192)",
                    "rgb(153, 102, 255)",
                    "rgb(255, 159, 64)",
                  ],
                  "data": Array [],
                  "label": "Calorias por mes",
                },
              ],
              "labels": Array [],
            }
          }
          options={
            Object {
              "labels": Object {
                "display": false,
              },
              "maintainAspectRatio": false,
              "plugins": Object {
                "legend": Object {
                  "display": true,
                },
              },
              "responsive": true,
            }
          }
        />
      </div>
    </div>
    <div
      className="col3"
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      <form>
        <r
          allowSameDay={false}
          customTimeInput={null}
          dateFormat="dd-MM-yyyy"
          dateFormatCalendar="LLLL yyyy"
          disabled={false}
          disabledKeyboardNavigation={false}
          dropdownMode="scroll"
          enableTabLoop={true}
          excludeScrollbar={true}
          focusSelectedMonth={false}
          monthsShown={1}
          name="date"
          nextMonthButtonLabel="Next Month"
          nextYearButtonLabel="Next Year"
          onBlur={[Function]}
          onCalendarClose={[Function]}
          onCalendarOpen={[Function]}
          onChange={[Function]}
          onClickOutside={[Function]}
          onFocus={[Function]}
          onInputClick={[Function]}
          onInputError={[Function]}
          onKeyDown={[Function]}
          onMonthChange={[Function]}
          onSelect={[Function]}
          onYearChange={[Function]}
          placeholderText="Fecha de inicio"
          preventOpenOnFocus={false}
          previousMonthButtonLabel="Previous Month"
          previousYearButtonLabel="Previous Year"
          readOnly={false}
          renderDayContents={[Function]}
          selected=""
          shouldCloseOnSelect={true}
          showFourColumnMonthYearPicker={false}
          showFullMonthYearPicker={false}
          showMonthYearPicker={false}
          showPopperArrow={true}
          showPreviousMonths={false}
          showQuarterYearPicker={false}
          showTimeInput={false}
          showTimeSelect={true}
          showTwoColumnMonthYearPicker={false}
          showYearPicker={false}
          strictParsing={false}
          style={
            Object {
              "float": "left",
            }
          }
          timeCaption="Time"
          timeInputLabel="Time"
          timeIntervals={30}
          withPortal={false}
          yearItemNumber={12}
        />
        <r
          allowSameDay={false}
          customTimeInput={null}
          dateFormat="dd-MM-yyyy"
          dateFormatCalendar="LLLL yyyy"
          disabled={false}
          disabledKeyboardNavigation={false}
          dropdownMode="scroll"
          enableTabLoop={true}
          excludeScrollbar={true}
          focusSelectedMonth={false}
          monthsShown={1}
          name="date"
          nextMonthButtonLabel="Next Month"
          nextYearButtonLabel="Next Year"
          onBlur={[Function]}
          onCalendarClose={[Function]}
          onCalendarOpen={[Function]}
          onChange={[Function]}
          onClickOutside={[Function]}
          onFocus={[Function]}
          onInputClick={[Function]}
          onInputError={[Function]}
          onKeyDown={[Function]}
          onMonthChange={[Function]}
          onSelect={[Function]}
          onYearChange={[Function]}
          placeholderText="Fecha de finalización"
          preventOpenOnFocus={false}
          previousMonthButtonLabel="Previous Month"
          previousYearButtonLabel="Previous Year"
          readOnly={false}
          renderDayContents={[Function]}
          selected=""
          shouldCloseOnSelect={true}
          showFourColumnMonthYearPicker={false}
          showFullMonthYearPicker={false}
          showMonthYearPicker={false}
          showPopperArrow={true}
          showPreviousMonths={false}
          showQuarterYearPicker={false}
          showTimeInput={false}
          showTimeSelect={true}
          showTwoColumnMonthYearPicker={false}
          showYearPicker={false}
          strictParsing={false}
          style={
            Object {
              "float": "left",
            }
          }
          timeCaption="Time"
          timeInputLabel="Time"
          timeIntervals={30}
          withPortal={false}
          yearItemNumber={12}
        />
        <button
          className="button"
          onClick={[Function]}
        >
          Buscar comidas
        </button>
        <p />
      </form>
      <p>
        Filtros
      </p>
      <WithStyles(ForwardRef(FormGroup)) />
    </div>
    <div
      className="col2"
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
          "minHeight": 400,
          "textAlign": "center",
        }
      }
    >
      <p>
        Consumo calórico mensual
      </p>
      <div
        style={
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "alignSelf": "center",
            "height": "100%",
            "justifyContent": "center",
            "minHeight": 300,
            "width": "90%",
          }
        }
      >
        <ForwardRef
          options={
            Object {
              "maintainAspectRatio": false,
              "plugins": Object {
                "legend": Object {
                  "display": false,
                },
              },
              "responsive": true,
            }
          }
        />
      </div>
    </div>
    <div
      className="col4"
      style={Object {}}
    >
      <div
        className="comidaa"
        style={
          Object {
            "borderRadius": "18px",
          }
        }
      >
        <p>
          Comidas más abundantes
        </p>
        <CarouselContainer
          history={
            Object {
              "push": [MockFunction],
            }
          }
          meals={
            Array [
              Object {
                "dateEaten": "2021-09-09T00:00:00.000Z",
                "foodsAndQuantity": Object {
                  "foods": Object {
                    "caloriesPerServing": 198,
                    "createdAt": "2021-09-15T19:58:04.486Z",
                    "foodId": 1,
                    "name": "Milanesa",
                    "recommendedServing": 85,
                  },
                  "quantity": 1,
                },
                "mealId": 21,
                "name": "queso",
                "userId": 1,
              },
              Object {
                "dateEaten": "2021-09-09T00:00:00.000Z",
                "foodsAndQuantity": Object {
                  "foods": Object {
                    "caloriesPerServing": 198,
                    "createdAt": "2021-09-15T19:58:04.486Z",
                    "foodId": 1,
                    "name": "Milanesa",
                    "recommendedServing": 85,
                  },
                  "quantity": 1,
                },
                "mealId": 22,
                "name": "carne",
                "userId": 1,
              },
              Object {
                "dateEaten": "2021-09-09T00:00:00.000Z",
                "foodsAndQuantity": Object {
                  "foods": Object {
                    "caloriesPerServing": 198,
                    "createdAt": "2021-09-15T19:58:04.486Z",
                    "foodId": 1,
                    "name": "Milanesa",
                    "recommendedServing": 85,
                  },
                  "quantity": 1,
                },
                "mealId": 23,
                "name": "jamon",
                "userId": 1,
              },
            ]
          }
        />
      </div>
    </div>
  </div>
  <div
    className="sidebarPro"
  >
    <div
      className="col3"
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      <h1
        className="f1"
        style={
          Object {
            "color": "rgb(0, 38, 38)",
            "fontFamily": "Arial",
          }
        }
      >
        Perfil 
        <img
          alt="profile"
          src="avatar.png"
          style={
            Object {
              "width": 50,
            }
          }
        />
      </h1>
    </div>
    <div
      className="col1"
      style={
        Object {
          "height": "100%",
        }
      }
    >
      <p>
        Nombre: 
        julian
      </p>
      <p>
        Apellido: 
        livrone
      </p>
      <p>
        Email: 
        julianlivrone@gmail.com
      </p>
      <p>
        Genero: 
        masculino
      </p>
    </div>
    <div
      className="col2"
      style={
        Object {
          "height": "100%",
        }
      }
    >
      <p>
        Fecha de Nacimiento: 
        2010-01-21
      </p>
      <p>
        Peso: 
        90
      </p>
      <p>
        Altura: 
        170
      </p>
      <Link
        style={
          Object {
            "color": "black",
            "marginBottom": "5%",
          }
        }
        to="/resetPassword"
      >
        Cambia tu contraseña
      </Link>
    </div>
  </div>
  <Footer />
</div>
`;

exports[`ProfileMainPage tests expect to render ProfileMainPage component to render with signing in sin comida 1`] = `
<div
  className="contenedorPro"
>
  <Header
    birthday="2010-01-21"
    email="julianlivrone@gmail.com"
    foodCategories={Array []}
    gender="masculino"
    height={170}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    meals={Array []}
    name="julian"
    onGetFoodCategories={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetLastYearsMeals={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetMealsByPeriod={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            "Nov 07 2020",
            "Oct 07 2021",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onGetMealsFromUser={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onLogout={[MockFunction]}
    password="asd"
    preventDefault={[MockFunction]}
    surname="livrone"
    userId={1}
    weight={90}
  />
  <div
    className="contenidoPro"
  >
    <div
      className="comida"
    >
      <MealsSearchBar
        birthday="2010-01-21"
        email="julianlivrone@gmail.com"
        foodCategories={Array []}
        gender="masculino"
        height={170}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        meals={Array []}
        name="julian"
        onGetFoodCategories={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetLastYearsMeals={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetMealsByPeriod={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
                "Nov 07 2020",
                "Oct 07 2021",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onGetMealsFromUser={
          [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        onLogout={[MockFunction]}
        password="asd"
        preventDefault={[MockFunction]}
        surname="livrone"
        userId={1}
        weight={90}
      />
    </div>
  </div>
  <div
    className="dashboardPro"
  >
    <div
      className="col1"
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
          "textAlign": "center",
        }
      }
    >
      <p>
        Porcentaje calórico por Categoría
      </p>
      <div
        style={
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "alignSelf": "center",
            "height": "100%",
            "justifyContent": "center",
            "width": "100%",
          }
        }
      >
        <ForwardRef
          data={
            Object {
              "datasets": Array [
                Object {
                  "backgroundColor": Array [
                    "rgb(255, 99, 132)",
                    "rgb(54, 162, 235)",
                    "rgb(255, 206, 86)",
                    "rgb(75, 192, 192)",
                    "rgb(153, 102, 255)",
                    "rgb(255, 159, 64)",
                  ],
                  "data": Array [],
                  "label": "Calorias por mes",
                },
              ],
              "labels": Array [],
            }
          }
          options={
            Object {
              "labels": Object {
                "display": false,
              },
              "maintainAspectRatio": false,
              "plugins": Object {
                "legend": Object {
                  "display": true,
                },
              },
              "responsive": true,
            }
          }
        />
      </div>
    </div>
    <div
      className="col3"
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      <form>
        <r
          allowSameDay={false}
          customTimeInput={null}
          dateFormat="dd-MM-yyyy"
          dateFormatCalendar="LLLL yyyy"
          disabled={false}
          disabledKeyboardNavigation={false}
          dropdownMode="scroll"
          enableTabLoop={true}
          excludeScrollbar={true}
          focusSelectedMonth={false}
          monthsShown={1}
          name="date"
          nextMonthButtonLabel="Next Month"
          nextYearButtonLabel="Next Year"
          onBlur={[Function]}
          onCalendarClose={[Function]}
          onCalendarOpen={[Function]}
          onChange={[Function]}
          onClickOutside={[Function]}
          onFocus={[Function]}
          onInputClick={[Function]}
          onInputError={[Function]}
          onKeyDown={[Function]}
          onMonthChange={[Function]}
          onSelect={[Function]}
          onYearChange={[Function]}
          placeholderText="Fecha de inicio"
          preventOpenOnFocus={false}
          previousMonthButtonLabel="Previous Month"
          previousYearButtonLabel="Previous Year"
          readOnly={false}
          renderDayContents={[Function]}
          selected=""
          shouldCloseOnSelect={true}
          showFourColumnMonthYearPicker={false}
          showFullMonthYearPicker={false}
          showMonthYearPicker={false}
          showPopperArrow={true}
          showPreviousMonths={false}
          showQuarterYearPicker={false}
          showTimeInput={false}
          showTimeSelect={true}
          showTwoColumnMonthYearPicker={false}
          showYearPicker={false}
          strictParsing={false}
          style={
            Object {
              "float": "left",
            }
          }
          timeCaption="Time"
          timeInputLabel="Time"
          timeIntervals={30}
          withPortal={false}
          yearItemNumber={12}
        />
        <r
          allowSameDay={false}
          customTimeInput={null}
          dateFormat="dd-MM-yyyy"
          dateFormatCalendar="LLLL yyyy"
          disabled={false}
          disabledKeyboardNavigation={false}
          dropdownMode="scroll"
          enableTabLoop={true}
          excludeScrollbar={true}
          focusSelectedMonth={false}
          monthsShown={1}
          name="date"
          nextMonthButtonLabel="Next Month"
          nextYearButtonLabel="Next Year"
          onBlur={[Function]}
          onCalendarClose={[Function]}
          onCalendarOpen={[Function]}
          onChange={[Function]}
          onClickOutside={[Function]}
          onFocus={[Function]}
          onInputClick={[Function]}
          onInputError={[Function]}
          onKeyDown={[Function]}
          onMonthChange={[Function]}
          onSelect={[Function]}
          onYearChange={[Function]}
          placeholderText="Fecha de finalización"
          preventOpenOnFocus={false}
          previousMonthButtonLabel="Previous Month"
          previousYearButtonLabel="Previous Year"
          readOnly={false}
          renderDayContents={[Function]}
          selected=""
          shouldCloseOnSelect={true}
          showFourColumnMonthYearPicker={false}
          showFullMonthYearPicker={false}
          showMonthYearPicker={false}
          showPopperArrow={true}
          showPreviousMonths={false}
          showQuarterYearPicker={false}
          showTimeInput={false}
          showTimeSelect={true}
          showTwoColumnMonthYearPicker={false}
          showYearPicker={false}
          strictParsing={false}
          style={
            Object {
              "float": "left",
            }
          }
          timeCaption="Time"
          timeInputLabel="Time"
          timeIntervals={30}
          withPortal={false}
          yearItemNumber={12}
        />
        <button
          className="button"
          onClick={[Function]}
        >
          Buscar comidas
        </button>
        <p />
      </form>
      <p>
        Filtros
      </p>
      <WithStyles(ForwardRef(FormGroup)) />
    </div>
    <div
      className="col2"
      style={
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
          "minHeight": 400,
          "textAlign": "center",
        }
      }
    >
      <p>
        Consumo calórico mensual
      </p>
      <div
        style={
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "alignSelf": "center",
            "height": "100%",
            "justifyContent": "center",
            "minHeight": 300,
            "width": "90%",
          }
        }
      >
        <ForwardRef
          options={
            Object {
              "maintainAspectRatio": false,
              "plugins": Object {
                "legend": Object {
                  "display": false,
                },
              },
              "responsive": true,
            }
          }
        />
      </div>
    </div>
    <div
      className="col4"
      style={Object {}}
    >
      <div
        className="comidaa"
        style={
          Object {
            "borderRadius": "18px",
          }
        }
      >
        <p>
          Comidas más abundantes
        </p>
      </div>
    </div>
  </div>
  <div
    className="sidebarPro"
  >
    <div
      className="col3"
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      <h1
        className="f1"
        style={
          Object {
            "color": "rgb(0, 38, 38)",
            "fontFamily": "Arial",
          }
        }
      >
        Perfil 
        <img
          alt="profile"
          src="avatar.png"
          style={
            Object {
              "width": 50,
            }
          }
        />
      </h1>
    </div>
    <div
      className="col1"
      style={
        Object {
          "height": "100%",
        }
      }
    >
      <p>
        Nombre: 
        julian
      </p>
      <p>
        Apellido: 
        livrone
      </p>
      <p>
        Email: 
        julianlivrone@gmail.com
      </p>
      <p>
        Genero: 
        masculino
      </p>
    </div>
    <div
      className="col2"
      style={
        Object {
          "height": "100%",
        }
      }
    >
      <p>
        Fecha de Nacimiento: 
        2010-01-21
      </p>
      <p>
        Peso: 
        90
      </p>
      <p>
        Altura: 
        170
      </p>
      <Link
        style={
          Object {
            "color": "black",
            "marginBottom": "5%",
          }
        }
        to="/resetPassword"
      >
        Cambia tu contraseña
      </Link>
    </div>
  </div>
  <Footer />
</div>
`;
